allprojects {
  group "$GROUP"
  version "$VERSION_NAME" // You can set the version in gradle.properties .


}

import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'com.vanniktech.maven.publish'

    // This just makes sure that a Javadoc JAR and a sources JAR are produced.
    mavenPublishing {
        configure(new JavaLibrary(new JavadocJar.Javadoc(), true))
    }


    // This sets the Javadoc JAR to have hopefully the correct name. This may need adjustment.
    mavenPlainJavadocJar.archiveBaseName.set(project.name)
    
    compileJava {
        // The default Java language level this targets is 8, which is as low as current
        // (Java 20 and newer) JDKs will permit you to target.
        // Targeting Java 7 is the lowest version you could need to go at this point, and
        // to target 7 you need to be using Java 19 or lower. The default used for JitPack
        // builds in this configuration uses Java 21 to build, so you would need to change
        // jitpack.yml to use openjdk17 instead of openjdk21 if you really want to target 7.
        // libGDX itself targets a mix of Java 7 (for most backends) and 8 (for LWJGL3).
        // You must use 8 if any libraries you use need Java 8 (some that
        // come to mind are simple-graphs and jdkgdxds, plus anything that needs LWJGL3).
        sourceCompatibility = 8
        targetCompatibility = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release.set(8)
        }
    }

    repositories {
        // You can comment out mavenLocal() if you have problems with GWT or other sources dependencies.
        mavenLocal()
        mavenCentral()
        maven { url 'https://s01.oss.sonatype.org' }
        google()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
        // JitPack is a good repo to have if you depend on commit versions.
        // Having the below repo might cause problems if uploading to Maven Central.
        maven { url 'https://jitpack.io' }
    }


    dependencies {
    // Change gdxVersion in gradle.properties to update or downgrade.
    // Libraries that don't use libGDX directly can change the next line
    // from `api` to `testImplementation` .
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
    // "lwjgl3" could be changed to "headless" for command-line-only testing.
        // testImplementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        // testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        // testImplementation "junit:junit:4.13.2"
    }

}


buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.31.0'
        
    }
}



